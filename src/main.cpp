#include "JpegCopier.h"
#include <iostream>

// 创建测试用的JPEG文件
void createTestImage(const std::string& filename) {
    // 创建一个最小的有效JPEG文件
    unsigned char minimal_jpg[] = {
        0xFF, 0xD8,  // SOI
        0xFF, 0xE0, 0x00, 0x10, 'J', 'F', 'I', 'F', 0x00,  // APP0
        0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
        0xFF, 0xDB, 0x00, 0x43, 0x00,  // DQT
        0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14,
        0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A,
        0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C,
        0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32,
        0xFF, 0xC0, 0x00, 0x0B, 0x08, 0x00, 0x02, 0x00, 0x02, 0x01, 0x01, 0x11, 0x00,  // SOF0 (2x2像素)
        0xFF, 0xC4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09,  // DHT
        0xFF, 0xDA, 0x00, 0x08, 0x01, 0x01, 0x00, 0x00, 0x3F, 0x00, 0x37, 0xFF, 0xD9  // SOS + EOI
    };
    
    std::ofstream file(filename, std::ios::binary);
    file.write(reinterpret_cast<char*>(minimal_jpg), sizeof(minimal_jpg));
}

int main() {
    try {
        // 创建测试图像
        createTestImage("test.jpg");
        
        // 创建JpegCopier实例
        JpegCopier copier;
        
        // 加载测试图像
        copier.loadFromFile("test.jpg");
        
        std::cout << "Original image size: " << copier.getWidth() << "x" << copier.getHeight() << std::endl;
        
        // 测试不同的区域拷贝
        JpegCopier::Rectangle region1(0, 0, 100, 100);
        copier.copyRegion(region1, "output1.jpg");
        
        JpegCopier::Rectangle region2(50, 50, 200, 150);
        copier.copyRegion(region2, "output2.jpg");
        
        JpegCopier::Rectangle region3(10, 20, 50, 80);
        copier.copyRegion(region3, "output3.jpg");
        
        std::cout << "All tests completed successfully!" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "Error: " << e.what() << std::endl;
        return 1;
    }
    
    return 0;
}
